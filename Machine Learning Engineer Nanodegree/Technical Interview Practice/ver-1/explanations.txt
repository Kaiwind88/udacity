
# Following is my efficiency explanation for 5 technical interview practice questions

"""
QUESTION 1: Given two strings s and t, determine whether some anagram of t is a substring of s.
"""
In anagram solution, there is only one for loop which gets executed (sl-tl) times, where 
- sl is the len of the string s and 
- tl is the len of the string t. 
Since python is high level language and ignoring internal low level implementation details,
we can safely approximate all other statements to execute in constant time. Overall, worst case
time efficiency of the solution can be approximated to O(n).

Solution calls for string manipulation (substring), which is best done by treating string as
array of characters. Hence data structure of choice here is an array.

"""
QUESTION 2: Given a string a, find the longest palindromic substring contained in a. 
"""
In palindrome solution, there are two for loops, which gets executed approximately 'n' times each, where
- n is the len of the given string. 
Ignoring internal low level implementation details of python, we can safely approximate all other statements
to execute in constant time. Overall, worst case time efficiency of the solution can be approximated to O(n^2).

Finding palindrome string also involves lot of string manipulation (substring), which is best done 
by treating string as array of characters. Hence data structure of choice here is an array.

"""
QUESTION 3: Given an undirected graph G, find the minimum spanning tree within G.
"""
Given an undirected and connected graph, a spanning tree of the graph is a tree that includes every vertex of graph 
and every edge in the tree. The cost of the spanning tree is the sum of the weights of all the edges in the tree. 
Minimum spanning tree is the spanning tree where the cost is minimum among all the spanning trees.

Kruskalâ€™s Algorithm builds the spanning tree by adding edges one by one into a growing spanning tree. 
Algorithm Steps:
- Sort the graph edges with respect to their weights.
- Start adding edges to the MST from the edge with the smallest weight until the edge of the largest weight.
- Only add edges which doesn't form a cycle.

In the kruskal implementation, sorting edges has complexity of O(n*log(n)), while the for loop that iterates 
over edges has complexity of O(n). Since we have used 'rank' (or length) to flatten the tree we can assume
that both find and union operation to be very fast. Overall, the complexity of the solution is dominated by 
sorting operation, which is O(n*log(n)).

We decided to use python dictionary data structure to store node Sets and ranks, because it allows both find
and union operation to perform in a constant time complexity O(1). If we had used Tree data structure then we 
would had to traverse the tree in each iteration; increasing complexity to O(log(n)).

"""
QUESTION 4: Find the least common ancestor between two nodes on a binary search tree. 
"""
In LCA for BST solution, tree building routine has complexity of O(n), where n is the number of nodes in the 
BST matrix. LCA routine is a recursive function, with worst case execution complexity of O(d), where d is 
the depth of the tree. Overall, the time complexity of the solution can be approximated to O(n+d). 

As prescribed by the problem definition, Binary Tree is the data structure of choice here.

"""
QUESTION 5: Find the element in a singly linked list that's m elements from the end.
"""
Maintain two pointers - reference pointer and main pointer. Initialize both reference and main 
pointers to head. First move reference pointer to n nodes from head. Now move both pointers one 
by one until reference pointer reaches end. Now main pointer will point to nth node from the end. 
    
Solution 5 makes use of singly linked list, which has access complexity of O(n) to append new nodes, where 
n is the number of elements in the linked list. While searching for mth nodes from end, we use two pointers.
ref_pointer iterates over entire linked list, so its complexity is O(n). On other hand, main_pointer iterates
only (n-m) steps, with complexity O(n-m). Overall, the time complexity of the solution can be approximated
to O(n^2).

As prescribed by the problem definition, Linked List is the data structure of choice here.








